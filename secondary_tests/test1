import sys
import os

parent_dir = os.path.dirname(os.getcwd())
sys.path.append(parent_dir)

from utilities_new import *

description = ["99_supercells", "88_reduced", "iso"]
data_subdir = ["ZMUMU_EGZ_extended_eFEX", "eFEX_with_newest_Topo_files"]
accept_data_filename = ["l1calo_hist_EGZ_extended.root", "l1calo_topocluster_test_Zee.root"]
reject_data_filename = ["l1calo_hist_ZMUMU_extended.root", "ZMUMU_TopoCluster_Supercell_Large.root"]
format_mode = ["SuperCell_ET", "reduced_SuperCell_ET", "iso_vars"]

binary_classifiers = import_all_classifiers()


# binary_classifiers= dict(list(binary_classifiers.items())[:1])
if 'NuSVC' in binary_classifiers:
    del binary_classifiers['NuSVC']
    print("NuSVC removed")
if 'SVC' in binary_classifiers:
    del binary_classifiers['SVC']
    print("SVC removed")

for i in tqdm(range(len(data_subdir))):
    for j in tqdm(range(len(description))):
        id = f"{data_subdir[i]}_{description[j]}"
        X_train, X_test, y_train, y_test, pd_passthrough_train, pd_passthrough_test = prepare_data(accept_data_filename = accept_data_filename[i], reject_data_filename = reject_data_filename[i], data_subdir = id, format_mode = format_mode[j], get_pT=True)
        results = train_evaluate_all_classifiers(binary_classifiers, X_train, X_test, y_train, y_test, pd_passthrough_train, pd_passthrough_test, description[j], id)
        # plot_all_results(binary_classifiers.keys(), description, data_subdir)